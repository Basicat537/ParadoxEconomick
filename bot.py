import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
from config import Config
from services.product_service import ProductService
from services.user_service import UserService
from services.order_service import OrderService
from services.admin_service import AdminService
from utils.rate_limiter import RateLimiter
from utils.validators import validate_input
from utils.security import check_user_access

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, Config.LOG_LEVEL)
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        # Initialize services
        try:
            self.product_service = ProductService()
            self.user_service = UserService()
            self.order_service = OrderService()
            self.admin_service = AdminService()
            self.rate_limiter = RateLimiter()

            # Validate required configuration
            Config.check_required_vars()
            logger.info("Bot initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize bot: {str(e)}")
            raise

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user = update.effective_user
            if not self.rate_limiter.check_limit(user.id):
                await update.message.reply_text("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            await self.user_service.create_user_if_not_exists(user)
            logger.info(f"User {user.id} started the bot")

            keyboard = [
                [InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog'),
                 InlineKeyboardButton("üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='orders')],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
                 InlineKeyboardButton("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
            ]

            if await self.admin_service.is_admin(user.id):
                keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, {user.first_name}!",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error in start command: {str(e)}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_catalog(self, update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        try:
            categories = await self.product_service.get_categories()
            keyboard = []
            for category in categories:
                keyboard.append([InlineKeyboardButton(
                    category.name, callback_data=f'category_{category.id}'
                )])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')])

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error showing catalog: {str(e)}")
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_products(self, update, context: ContextTypes.DEFAULT_TYPE, category_id: int):
        query = update.callback_query
        try:
            products = await self.product_service.get_products_by_category(category_id)
            keyboard = []
            for product in products:
                keyboard.append([InlineKeyboardButton(
                    f"{product.name} - ${product.price}",
                    callback_data=f'product_{product.id}'
                )])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='catalog')])

            await query.edit_message_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error showing products: {str(e)}")
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_product_details(self, update, context: ContextTypes.DEFAULT_TYPE, product_id: int):
        query = update.callback_query
        try:
            product = await self.product_service.get_product(product_id)
            keyboard = [
                [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f'buy_{product_id}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'category_{product.category_id}')]
            ]

            text = f"""
{product.name}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}
üíµ –¶–µ–Ω–∞: ${product.price}
            """

            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error showing product details: {str(e)}")
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_callback(self, update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user = query.from_user

        try:
            if not self.rate_limiter.check_limit(user.id):
                await query.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            data = query.data

            if data == 'catalog':
                await self.show_catalog(update, context)
            elif data.startswith('category_'):
                category_id = int(data.split('_')[1])
                await self.show_products(update, context, category_id)
            elif data.startswith('product_'):
                product_id = int(data.split('_')[1])
                await self.show_product_details(update, context, product_id)
            elif data == 'orders':
                await self.show_orders(update, context)
            elif data == 'profile':
                await self.show_profile(update, context)
            elif data == 'support':
                await self.show_support(update, context)
            elif data == 'admin' and await self.admin_service.is_admin(user.id):
                await self.show_admin_panel(update, context)

        except Exception as e:
            logger.error(f"Error handling callback: {str(e)}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_orders(self, update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        try:
            orders = await self.order_service.get_user_orders(query.from_user.id)
            if not orders:
                keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]]
                await query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return

            text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
            keyboard = []

            for order in orders:
                text += f"–ó–∞–∫–∞–∑ #{order.id}\n"
                text += f"–¢–æ–≤–∞—Ä: {order.product.name}\n"
                text += f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                text += f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                keyboard.append([InlineKeyboardButton(
                    f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}",
                    callback_data=f'order_{order.id}'
                )])

            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')])
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error showing orders: {str(e)}")
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_profile(self, update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        try:
            profile = await self.user_service.get_user_profile(query.from_user.id)
            if not profile:
                await query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å

Username: @{profile['username']}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile['created_at'].strftime('%d.%m.%Y')}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {profile['orders_count']}
            """

            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]]
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error showing profile: {str(e)}")
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_support(self, update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", callback_data='create_ticket')],
            [InlineKeyboardButton("üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã", callback_data='my_tickets')],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
        ]

        await query.edit_message_text(
            "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_admin_panel(self, update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        try:
            if not await self.admin_service.is_admin(query.from_user.id):
                await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return

            stats = await self.admin_service.get_statistics()
            text = f"""
‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {stats['completed_orders']}
‚ùì –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {stats['pending_tickets']}
üõç –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {stats['active_products']}
            """

            keyboard = [
                [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data='admin_products'),
                 InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users')],
                [InlineKeyboardButton("üé´ –¢–∏–∫–µ—Ç—ã", callback_data='admin_tickets'),
                 InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data='admin_finance')],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
            ]

            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error showing admin panel: {str(e)}")
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @validate_input
    async def handle_message(self, update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if not self.rate_limiter.check_limit(update.effective_user.id):
                await update.message.reply_text("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
                return

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data='start')
                ]])
            )
        except Exception as e:
            logger.error(f"Error handling message: {str(e)}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def run(self):
        """Run the bot"""
        try:
            # Create and configure the application
            app = Application.builder().token(Config.BOT_TOKEN).build()

            # Add handlers
            app.add_handler(CommandHandler("start", self.start))
            app.add_handler(CallbackQueryHandler(self.handle_callback))
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

            # Start the bot
            logger.info("Bot started")
            app.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            logger.error(f"Failed to start bot: {str(e)}")
            raise

def main():
    """Main function to run the bot"""
    try:
        bot = TelegramBot()
        bot.run()
    except Exception as e:
        logger.critical(f"Critical error: {str(e)}")
        raise

if __name__ == '__main__':
    main()