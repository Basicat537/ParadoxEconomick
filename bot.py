import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
from config import Config
from services.product_service import ProductService
from services.user_service import UserService
from services.order_service import OrderService
from services.admin_service import AdminService
from utils.rate_limiter import RateLimiter
from utils.validators import validate_input
from utils.security import check_user_access
from utils.logger import BotLogger
from utils.error_handler import handle_errors, db_session_decorator
from app import app
from datetime import datetime, timedelta

logger = BotLogger.get_logger()

class UserState:
    """Class to manage user conversation state"""
    def __init__(self):
        self.state = 'start'
        self.data = {}
        self.last_command = None
        self.last_interaction = datetime.utcnow()

    def update(self, new_state, **kwargs):
        self.state = new_state
        self.data.update(kwargs)
        self.last_interaction = datetime.utcnow()

    def is_expired(self, timeout_minutes=30):
        return datetime.utcnow() - self.last_interaction > timedelta(minutes=timeout_minutes)

class TelegramBot:
    def __init__(self):
        try:
            # Initialize services
            self.product_service = ProductService()
            self.user_service = UserService()
            self.order_service = OrderService()
            self.admin_service = AdminService()
            self.rate_limiter = RateLimiter()
            self.user_states = {}

            # Validate required configuration
            Config.check_required_vars()
            logger.info("Bot initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize bot: {str(e)}")
            raise

    def get_user_state(self, user_id: int) -> UserState:
        """Get or create user state"""
        if user_id not in self.user_states or self.user_states[user_id].is_expired():
            self.user_states[user_id] = UserState()
        return self.user_states[user_id]

    async def handle_error(self, update: Update, error_message: str):
        """Enhanced error handling with detailed feedback"""
        try:
            user_id = update.effective_user.id

            # Check if this is a rate limit error
            remaining, wait_time = self.rate_limiter.get_remaining_attempts(user_id)
            if wait_time > 0:
                error_message = (
                    f"‚ö†Ô∏è {error_message}\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                )

            if update.callback_query:
                await update.callback_query.answer(
                    error_message,
                    show_alert=True
                )
            else:
                keyboard = [[
                    InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')
                ]]
                await update.message.reply_text(
                    f"{error_message}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

            logger.warning(
                f"Error handled for user {user_id}: {error_message} "
                f"(Wait time: {wait_time}s)"
            )
        except Exception as e:
            logger.error(f"Error in error handler: {str(e)}")

    @handle_errors
    @db_session_decorator
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enhanced start command with better user feedback"""
        with app.app_context():
            try:
                user = update.effective_user
                BotLogger.log_request(update, context)

                # Check rate limit with detailed feedback
                if not self.rate_limiter.check_limit(user.id):
                    remaining, wait_time = self.rate_limiter.get_remaining_attempts(user.id)
                    await self.handle_error(
                        update,
                        f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}"
                    )
                    return

                # Reset user state
                user_state = self.get_user_state(user.id)
                user_state.update('main_menu')

                # Create or update user
                await self.user_service.create_user_if_not_exists(user)
                logger.info(f"User {user.id} started the bot")

                # Build dynamic keyboard with help button
                keyboard = [
                    [
                        InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog'),
                        InlineKeyboardButton("üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='orders')
                    ],
                    [
                        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
                        InlineKeyboardButton("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
                    ],
                    [
                        InlineKeyboardButton("üìñ –ü–æ–º–æ—â—å", callback_data='help')
                    ]
                ]

                if await self.admin_service.is_admin(user.id):
                    keyboard.insert(-1, [
                        InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')
                    ])

                reply_markup = InlineKeyboardMarkup(keyboard)
                welcome_text = (
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, {user.first_name}!\n\n"
                    "üîπ –í –∫–∞—Ç–∞–ª–æ–≥–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
                    "üîπ –í —Ä–∞–∑–¥–µ–ª–µ –∑–∞–∫–∞–∑–æ–≤ - –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫\n"
                    "üîπ –í –ø—Ä–æ—Ñ–∏–ª–µ - –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                    "üîπ –í –ø–æ–¥–¥–µ—Ä–∂–∫–µ - –ø–æ–º–æ—â—å –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
                )

                await update.message.reply_text(
                    welcome_text,
                    reply_markup=reply_markup
                )

            except Exception as e:
                logger.error(f"Error in start command: {str(e)}")
                await self.handle_error(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @handle_errors
    @db_session_decorator
    async def show_catalog(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enhanced catalog display with error recovery"""
        with app.app_context():
            query = update.callback_query
            user_state = self.get_user_state(query.from_user.id)

            try:
                categories = await self.product_service.get_categories()
                keyboard = []

                # Group categories in pairs for better layout
                for i in range(0, len(categories), 2):
                    row = [InlineKeyboardButton(
                        categories[i].name,
                        callback_data=f'category_{categories[i].id}'
                    )]
                    if i + 1 < len(categories):
                        row.append(InlineKeyboardButton(
                            categories[i+1].name,
                            callback_data=f'category_{categories[i+1].id}'
                        ))
                    keyboard.append(row)

                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')])
                user_state.update('catalog')

                await query.edit_message_text(
                    "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"Error showing catalog: {str(e)}")
                await self.handle_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥")

    @handle_errors
    @db_session_decorator
    async def show_category_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category_id: int):
        """Enhanced product listing with pagination"""
        with app.app_context():
            query = update.callback_query
            user_state = self.get_user_state(query.from_user.id)

            try:
                products = await self.product_service.get_products_by_category(category_id)

                if not products:
                    await query.edit_message_text(
                        "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='catalog')
                        ]])
                    )
                    return

                # Paginate products
                page = int(user_state.data.get('page', 1))
                per_page = 5
                start_idx = (page - 1) * per_page
                end_idx = start_idx + per_page
                current_products = products[start_idx:end_idx]

                keyboard = []
                for product in current_products:
                    keyboard.append([InlineKeyboardButton(
                        f"{product.name} - ${product.price}",
                        callback_data=f'product_{product.id}'
                    )])

                # Add pagination controls
                nav_buttons = []
                if page > 1:
                    nav_buttons.append(InlineKeyboardButton(
                        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=f'page_{page-1}'
                    ))
                if end_idx < len(products):
                    nav_buttons.append(InlineKeyboardButton(
                        "‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                        callback_data=f'page_{page+1}'
                    ))
                if nav_buttons:
                    keyboard.append(nav_buttons)

                keyboard.append([InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    callback_data='catalog'
                )])

                user_state.update('category', category_id=category_id, page=page)

                await query.edit_message_text(
                    f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Å—Ç—Ä. {page}/{(len(products)-1)//per_page + 1}):",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"Error showing products: {str(e)}")
                await self.handle_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")

    @handle_errors
    @db_session_decorator
    async def show_product_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: int):
        """Enhanced product details with rich formatting"""
        with app.app_context():
            query = update.callback_query
            user_state = self.get_user_state(query.from_user.id)

            try:
                product = await self.product_service.get_product(product_id)
                if not product:
                    await self.handle_error(update, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                keyboard = [
                    [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f'buy_{product_id}')],
                    [InlineKeyboardButton(
                        "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
                        callback_data=f'category_{product.category_id}'
                    )]
                ]

                text = (
                    f"üè∑ *{product.name}*\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{product.description}\n\n"
                    f"üíµ *–¶–µ–Ω–∞:* ${product.price:.2f}\n"
                    f"üì¶ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {product.category.name}\n"
                )

                user_state.update('product', product_id=product_id)

                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error showing product details: {str(e)}")
                await self.handle_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ")

    @handle_errors
    @db_session_decorator
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enhanced callback handling with better state management and feedback"""
        with app.app_context():
            query = update.callback_query
            user = query.from_user
            user_state = self.get_user_state(user.id)

            try:
                # Rate limit check with detailed feedback
                if not self.rate_limiter.check_limit(user.id):
                    remaining, wait_time = self.rate_limiter.get_remaining_attempts(user.id)
                    await query.answer(
                        f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥.",
                        show_alert=True
                    )
                    return

                data = query.data

                # Handle help command
                if data == 'help':
                    help_text = (
                        "üìñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
                        "üîπ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª *–ö–∞—Ç–∞–ª–æ–≥*\n"
                        "üîπ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ *–ú–æ–∏ –∑–∞–∫–∞–∑—ã*\n"
                        "üîπ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ *–ü—Ä–æ—Ñ–∏–ª–µ*\n"
                        "üîπ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ *–ü–æ–¥–¥–µ—Ä–∂–∫—É*\n\n"
                        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                    )
                    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]]
                    await query.edit_message_text(
                        help_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                    return

                # Handle pagination
                if data.startswith('page_'):
                    page = int(data.split('_')[1])
                    user_state.data['page'] = page
                    await self.show_category_products(
                        update,
                        context,
                        user_state.data['category_id']
                    )
                    return

                # Handle navigation timeouts
                if user_state.is_expired():
                    await query.answer(
                        "‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                        show_alert=True
                    )
                    user_state.update('start')
                    await self.start(update, context)
                    return

                # Handle main navigation with state tracking
                prev_state = user_state.state
                if data == 'catalog':
                    user_state.update('catalog')
                    await self.show_catalog(update, context)
                elif data.startswith('category_'):
                    category_id = int(data.split('_')[1])
                    user_state.update('category', category_id=category_id)
                    await self.show_category_products(update, context, category_id)
                elif data.startswith('product_'):
                    product_id = int(data.split('_')[1])
                    user_state.update('product', product_id=product_id)
                    await self.show_product_details(update, context, product_id)
                elif data == 'orders':
                    user_state.update('orders')
                    await self.show_orders(update, context)
                elif data == 'profile':
                    user_state.update('profile')
                    await self.show_profile(update, context)
                elif data == 'support':
                    user_state.update('support')
                    await self.show_support(update, context)
                elif data == 'admin' and await self.admin_service.is_admin(user.id):
                    user_state.update('admin')
                    await self.show_admin_panel(update, context)
                elif data == 'start':
                    user_state.update('main_menu')
                    keyboard = self.get_main_menu_keyboard(user.id)
                    await query.edit_message_text(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=keyboard
                    )
                else:
                    logger.warning(f"Unknown callback data: {data}")
                    await query.answer(
                        "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                        show_alert=True
                    )
                    return

                # Log navigation for analytics
                logger.info(
                    f"User {user.id} navigated from {prev_state} to {user_state.state}"
                )

            except Exception as e:
                logger.error(f"Error handling callback: {str(e)}")
                await self.handle_error(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    def get_main_menu_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """Generate main menu keyboard"""
        keyboard = [
            [
                InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog'),
                InlineKeyboardButton("üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='orders')
            ],
            [
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
                InlineKeyboardButton("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
            ],
            [
                InlineKeyboardButton("üìñ –ü–æ–º–æ—â—å", callback_data='help')
            ]
        ]

        if self.admin_service.is_admin(user_id):
            keyboard.insert(-1, [
                InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')
            ])

        return InlineKeyboardMarkup(keyboard)

    @validate_input
    @handle_errors
    @db_session_decorator
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enhanced message handling with context awareness"""
        with app.app_context():
            try:
                user = update.effective_user
                user_state = self.get_user_state(user.id)

                if not self.rate_limiter.check_limit(user.id):
                    await update.message.reply_text(
                        "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
                    )
                    return

                # Handle different states
                if user_state.state == 'support_ticket':
                    # Handle support ticket creation
                    await self.handle_support_message(update, context, user_state)
                else:
                    # Default response
                    await update.message.reply_text(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                        reply_markup=self.get_main_menu_keyboard(user.id)
                    )

            except Exception as e:
                logger.error(f"Error handling message: {str(e)}")
                await self.handle_error(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_support_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: UserState):
        """Handle support ticket messages"""
        message = update.message.text

        if len(message) < 10:
            await update.message.reply_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
            )
            return

        try:
            # Assuming support_service is defined elsewhere
            ticket = await self.support_service.create_ticket(
                user_id=update.effective_user.id,
                message=message
            )

            user_state.update('main_menu')
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=self.get_main_menu_keyboard(update.effective_user.id)
            )

        except Exception as e:
            logger.error(f"Error creating support ticket: {str(e)}")
            await self.handle_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")


    @handle_errors
    @db_session_decorator
    async def show_orders(self, update, context: ContextTypes.DEFAULT_TYPE):
        with app.app_context():
            query = update.callback_query
            try:
                orders = await self.order_service.get_user_orders(query.from_user.id)
                if not orders:
                    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]]
                    await query.edit_message_text(
                        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return

                text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
                keyboard = []

                for order in orders:
                    text += f"–ó–∞–∫–∞–∑ #{order.id}\n"
                    text += f"–¢–æ–≤–∞—Ä: {order.product.name}\n"
                    text += f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                    text += f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    keyboard.append([InlineKeyboardButton(
                        f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}",
                        callback_data=f'order_{order.id}'
                    )])

                keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')])
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"Error showing orders: {str(e)}")
                await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @handle_errors
    @db_session_decorator
    async def show_profile(self, update, context: ContextTypes.DEFAULT_TYPE):
        with app.app_context():
            query = update.callback_query
            try:
                profile = await self.user_service.get_user_profile(query.from_user.id)
                if not profile:
                    await query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å

Username: @{profile['username']}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile['created_at'].strftime('%d.%m.%Y')}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {profile['orders_count']}
                """

                keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]]
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"Error showing profile: {str(e)}")
                await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @handle_errors
    @db_session_decorator
    async def show_support(self, update, context: ContextTypes.DEFAULT_TYPE):
        with app.app_context():
            query = update.callback_query
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", callback_data='create_ticket')],
                [InlineKeyboardButton("üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã", callback_data='my_tickets')],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
            ]

            await query.edit_message_text(
                "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    @handle_errors
    @db_session_decorator
    async def show_admin_panel(self, update, context: ContextTypes.DEFAULT_TYPE):
        with app.app_context():
            query = update.callback_query
            try:
                if not await self.admin_service.is_admin(query.from_user.id):
                    await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                    return

                stats = await self.admin_service.get_statistics()
                text = f"""
‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {stats['completed_orders']}
‚ùì –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {stats['pending_tickets']}
üõç –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {stats['active_products']}
                """

                keyboard = [
                    [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data='admin_products'),
                     InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users')],
                    [InlineKeyboardButton("üé´ –¢–∏–∫–µ—Ç—ã", callback_data='admin_tickets'),
                     InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data='admin_finance')],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
                ]

                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"Error showing admin panel: {str(e)}")
                await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Shows help information to the user."""
        try:
            query = update.callback_query
            help_text = """
            **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

            * `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
            * –ö–∞—Ç–∞–ª–æ–≥ - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            * –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            * –ü—Ä–æ—Ñ–∏–ª—å - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ
            * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            * –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) - –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            """
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]]
            await query.edit_message_text(
                text=help_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error showing help: {str(e)}")
            await self.handle_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É")

    def run(self):
        """Run the bot with enhanced error handling"""
        try:
            # Create and configure the application
            app = Application.builder().token(Config.BOT_TOKEN).build()

            # Add handlers
            app.add_handler(CommandHandler("start", self.start))
            app.add_handler(CallbackQueryHandler(self.handle_callback))
            app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                self.handle_message
            ))

            # Start the bot
            logger.info("Bot started")
            app.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except Exception as e:
            logger.error(f"Failed to start bot: {str(e)}")
            raise

def main():
    """Main function to run the bot"""
    try:
        bot = TelegramBot()
        bot.run()
    except Exception as e:
        logger.critical(f"Critical error: {str(e)}")
        raise

if __name__ == '__main__':
    main()