import TelegramBot from "node-telegram-bot-api";
import { storage } from "./storage";

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error("TELEGRAM_BOT_TOKEN is required");
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

export function setupBot() {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, 
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –Ω—É–∂–Ω–æ:\n\n" +
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ\n" +
        "2. –£–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + chatId + "\n\n" +
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        { parse_mode: "Markdown" }
      );
      return;
    }

    const keyboard = {
      keyboard: [
        [{ text: 'üõç –ö–∞—Ç–∞–ª–æ–≥' }, { text: 'üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
        [{ text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞' }, { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' }]
      ],
      resize_keyboard: true
    };

    bot.sendMessage(chatId, 
      `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`,
      { reply_markup: keyboard }
    );
  });

  bot.onText(/\/register/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId,
      "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n" +
      "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: http://localhost:5000/auth\n" +
      "2. –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'\n" +
      "3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:\n" +
      "   - –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" +
      "   - –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å\n" +
      "   - –í –ø–æ–ª–µ Telegram ID –≤–≤–µ–¥–∏—Ç–µ: " + chatId + "\n\n" +
      "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
    );
  });

  bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, 
        "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.");
      return;
    }

    if (!user.isAdmin) {
      bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      return;
    }

    bot.sendMessage(chatId,
      "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:\nhttp://localhost:5000/admin/products\n\n" +
      "–í –ø–∞–Ω–µ–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n" +
      "‚úì –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏\n" +
      "‚úì –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n" +
      "‚úì –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã\n" +
      "‚úì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    );
  });

  bot.onText(/üõç –ö–∞—Ç–∞–ª–æ–≥/, async (msg) => {
    const chatId = msg.chat.id;
    const categories = await storage.getCategories();

    const keyboard = {
      inline_keyboard: categories.map(cat => [{
        text: cat.name,
        callback_data: `category_${cat.id}`
      }])
    };

    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", { reply_markup: keyboard });
  });

  bot.on('callback_query', async (query) => {
    if (!query.data || !query.message) return;

    const chatId = query.message.chat.id;

    if (query.data.startsWith('category_')) {
      const categoryId = parseInt(query.data.split('_')[1]);
      const products = await storage.getProducts();
      const categoryProducts = products.filter(p => p.categoryId === categoryId);

      for (const product of categoryProducts) {
        const keyboard = {
          inline_keyboard: [[{
            text: `–ö—É–ø–∏—Ç—å –∑–∞ $${(product.price / 100).toFixed(2)}`,
            callback_data: `buy_${product.id}`
          }]]
        };

        bot.sendMessage(chatId,
          `*${product.name}*\n${product.description}\n–¶–µ–Ω–∞: $${(product.price / 100).toFixed(2)}`,
          { 
            parse_mode: 'Markdown',
            reply_markup: keyboard
          }
        );
      }
    }

    if (query.data.startsWith('buy_')) {
      const productId = parseInt(query.data.split('_')[1]);
      const product = await storage.getProduct(productId);

      if (!product) {
        bot.sendMessage(chatId, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ
      bot.sendMessage(chatId,
        `–î–ª—è –ø–æ–∫—É–ø–∫–∏ ${product.name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É:\n\n` +
        `–°—É–º–º–∞: $${(product.price / 100).toFixed(2)}\n` +
        `–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\nUSDT (TRC20): <–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞>\nBTC: <–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞>\n\n` +
        `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
      );
    }
  });

  bot.onText(/üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.");
      return;
    }

    const orders = await storage.getUserOrders(user.id);

    if (orders.length === 0) {
      bot.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
      return;
    }

    for (const order of orders) {
      const product = await storage.getProduct(order.productId);
      if (!product) continue;

      bot.sendMessage(chatId,
        `–ó–∞–∫–∞–∑ #${order.id}\n` +
        `–¢–æ–≤–∞—Ä: ${product.name}\n` +
        `–°—Ç–∞—Ç—É—Å: ${order.status}\n` +
        `–ò—Ç–æ–≥–æ: $${(order.totalPrice / 100).toFixed(2)}`
      );
    }
  });

  bot.onText(/üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.");
      return;
    }

    bot.sendMessage(chatId,
      "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n" +
      "/support <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>");
  });

  bot.onText(/\/support (.+)/, async (msg, match) => {
    if (!match) return;

    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.");
      return;
    }

    const ticket = await storage.createTicket({
      userId: user.id,
      subject: "–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑ Telegram",
      message: match[1],
      status: "open"
    });

    bot.sendMessage(chatId,
      `–¢–∏–∫–µ—Ç #${ticket.id} —Å–æ–∑–¥–∞–Ω.\n` +
      `–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
  });
}