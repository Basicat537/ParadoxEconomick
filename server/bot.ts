import TelegramBot from "node-telegram-bot-api";
import { storage } from "./storage";

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error("TELEGRAM_BOT_TOKEN is required");
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

export function setupBot() {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, 
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Telegram.");
      return;
    }

    const keyboard = {
      keyboard: [
        [{ text: 'üõç –ö–∞—Ç–∞–ª–æ–≥' }, { text: 'üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
        [{ text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞' }, { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' }]
      ],
      resize_keyboard: true
    };

    bot.sendMessage(chatId, 
      `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`,
      { reply_markup: keyboard }
    );
  });

  bot.onText(/üõç –ö–∞—Ç–∞–ª–æ–≥/, async (msg) => {
    const chatId = msg.chat.id;
    const categories = await storage.getCategories();

    const keyboard = {
      inline_keyboard: categories.map(cat => [{
        text: cat.name,
        callback_data: `category_${cat.id}`
      }])
    };

    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", { reply_markup: keyboard });
  });

  bot.on('callback_query', async (query) => {
    if (!query.data || !query.message) return;

    const chatId = query.message.chat.id;

    if (query.data.startsWith('category_')) {
      const categoryId = parseInt(query.data.split('_')[1]);
      const products = await storage.getProducts();
      const categoryProducts = products.filter(p => p.categoryId === categoryId);

      for (const product of categoryProducts) {
        const keyboard = {
          inline_keyboard: [[{
            text: `–ö—É–ø–∏—Ç—å –∑–∞ $${(product.price / 100).toFixed(2)}`,
            callback_data: `buy_${product.id}`
          }]]
        };

        bot.sendMessage(chatId,
          `*${product.name}*\n${product.description}\n–¶–µ–Ω–∞: $${(product.price / 100).toFixed(2)}`,
          { 
            parse_mode: 'Markdown',
            reply_markup: keyboard
          }
        );
      }
    }

    if (query.data.startsWith('buy_')) {
      const productId = parseInt(query.data.split('_')[1]);
      const product = await storage.getProduct(productId);

      if (!product) {
        bot.sendMessage(chatId, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ
      bot.sendMessage(chatId,
        `–î–ª—è –ø–æ–∫—É–ø–∫–∏ ${product.name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É:\n\n` +
        `–°—É–º–º–∞: $${(product.price / 100).toFixed(2)}\n` +
        `–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\nUSDT (TRC20): <–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞>\nBTC: <–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞>\n\n` +
        `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
      );
    }
  });

  bot.onText(/üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.");
      return;
    }

    const orders = await storage.getUserOrders(user.id);

    if (orders.length === 0) {
      bot.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
      return;
    }

    for (const order of orders) {
      const product = await storage.getProduct(order.productId);
      if (!product) continue;

      bot.sendMessage(chatId,
        `–ó–∞–∫–∞–∑ #${order.id}\n` +
        `–¢–æ–≤–∞—Ä: ${product.name}\n` +
        `–°—Ç–∞—Ç—É—Å: ${order.status}\n` +
        `–ò—Ç–æ–≥–æ: $${(order.totalPrice / 100).toFixed(2)}`
      );
    }
  });

  bot.onText(/üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.");
      return;
    }

    bot.sendMessage(chatId,
      "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n" +
      "/support <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>");
  });

  bot.onText(/\/support (.+)/, async (msg, match) => {
    if (!match) return;

    const chatId = msg.chat.id;
    const user = await storage.getUserByTelegramId(chatId.toString());

    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.");
      return;
    }

    const ticket = await storage.createTicket({
      userId: user.id,
      subject: "–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑ Telegram",
      message: match[1],
      status: "open"
    });

    bot.sendMessage(chatId,
      `–¢–∏–∫–µ—Ç #${ticket.id} —Å–æ–∑–¥–∞–Ω.\n` +
      `–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
  });
}